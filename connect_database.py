from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json
import os
from datetime import date
import datetime
import csv

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-face-attendance.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("Face_attendance-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

row = session.execute("select release_version from system.local").one()
if row:
  print(row[0])
else:
  print("An error occurred.")

keyspace_name = 'attendance'

session.execute(f"USE {keyspace_name}")

def create_tables():
    create_mrng_table = """
        CREATE TABLE IF NOT EXISTS mrng_attendance (
            name text,
            pin text PRIMARY KEY,
            branch text,
            initial_time timestamp
        )
    """
   
    create_evng_table = """
        CREATE TABLE IF NOT EXISTS evng_attendance (
            name text,
            pin text PRIMARY KEY,
            branch text,
            final_time timestamp
        )
    """
   
    create_final_table = """
        CREATE TABLE IF NOT EXISTS final_attendance (
            name text,
            pin text PRIMARY KEY,
            branch text,
            initial_time timestamp,
            final_time timestamp,
            time_difference timestamp,
            status text
        )
    """
    create_images_table_query = """
    CREATE TABLE IF NOT EXISTS images (
        name_pin text PRIMARY KEY,
        image_list list<text>
    )
    """
    session.execute(create_mrng_table)
    session.execute(create_evng_table)
    session.execute(create_final_table)
    session.execute(create_images_table_query)
    print("TABLES created successfully...")





def insert_images(user_name, folder_path="C:\\Users\\mrnan\\OneDrive\\Desktop\\Attenance_system-main\\static\\images\\faces"):
    user_folder_path = os.path.join(folder_path, user_name)
    print("User folder path:", user_folder_path)
    name_pin = os.path.basename(folder_path)
    print(name_pin)
    image_list = []

    for filename in os.listdir(folder_path):
        if filename.endswith(".jpg") or filename.endswith(".png"):
            with open(os.path.join(folder_path, filename), "rb") as image_file:
                image_list.append(image_file.read().hex())

    insert_query = """
    INSERT INTO images (name_pin, image_list) VALUES (%s, %s)
    """
    session.execute(insert_query, (name_pin, image_list))


def mrng_csv(username,userid,branch,current_time):
    
    print(username,userid,branch,current_time)
    initial_time = current_time
    hours, minutes, seconds = map(int, initial_time.split(':'))
    today_date = datetime.date.today()
    combined_datetime = datetime.datetime.combine(today_date, datetime.time(hours, minutes, seconds))
    print("combined time : ",combined_datetime)
    insert_query = """
        INSERT INTO mrng_attendance (name, pin, branch, initial_time) VALUES (%s, %s, %s, %s)
    """
    session.execute(insert_query, (username, userid, branch, combined_datetime))
    print("morning Inserted successfully ...")


def evng_csv(username,userid,branch,current_time):
    
    print(username,userid,branch,current_time)
    initial_time = current_time
    hours, minutes, seconds = map(int, initial_time.split(':'))
    today_date = datetime.date.today()
    combined_datetime = datetime.datetime.combine(today_date, datetime.time(hours, minutes, seconds))
    print("combined time : ",combined_datetime)
    insert_query = """
        INSERT INTO mrng_attendance (name, pin, branch, initial_time) VALUES (%s, %s, %s, %s)
    """
    session.execute(insert_query, (username, userid, branch, combined_datetime))
    print("evening Inserted successfully ...")


def final_csv():
    today_date = date.today().strftime("%d_%m_%y")
    csv_file_path = f'Attendance\\final_attendance\\Attendance-{today_date}.csv'
    
    with open(csv_file_path, 'r') as csvfile:
        csvreader = csv.reader(csvfile)
        next(csvreader)
        for row in csvreader:
            name, pin, branch, initial_time, final_time, time_difference, status = row
            print(name, pin, branch, initial_time, final_time, time_difference, status)
            initial_time = initial_time
            hours1, minutes1, seconds1 = map(int, initial_time.split(':'))
            today_date = datetime.date.today()
            combined_datetime_initial = datetime.datetime.combine(today_date, datetime.time(hours1, minutes1, seconds1))
            
            hours2, minutes2, seconds2 = map(int, final_time.split(':'))
            combined_datetime_final = datetime.datetime.combine(today_date, datetime.time(hours2, minutes2, seconds2))
            
            # Calculate the time difference
            time_diff = combined_datetime_final - combined_datetime_initial
            
            insert_query = """
                INSERT INTO final_attendance (name, pin, branch, initial_time, final_time, time_difference, status)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """
            session.execute(insert_query, (name, pin, branch, combined_datetime_initial, combined_datetime_final, time_diff, status))
            print("final inserted successfully...")

if __name__ == '__main__':

    # create_tables()
    print("Mrng attendance...")
    rows = session.execute("SELECT * FROM mrng_attendance")
    for row in rows:
        print(row)
   
    
   

